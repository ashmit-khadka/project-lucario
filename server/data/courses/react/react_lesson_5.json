{
  "title": "üåê API & Integration",
  "description": "Master data fetching, caching, and secure authentication flows in React using modern libraries like Axios, React Query, GraphQL clients, and OAuth providers.",
  "sections": [
    {
      "title": "21. Data Fetching Strategies",
      "content": [
        {
          "type": "text",
          "content": "React supports many data-fetching methods, from REST with `fetch` or `axios` to GraphQL and caching layers like React Query and SWR. Choose based on complexity, caching needs, and architecture."
        },
        {
          "type": "list",
          "items": [
            "Use `fetch` or `axios` for simple REST APIs.",
            "Use React Query or SWR for caching, retries, and background updates.",
            "Use Apollo Client or urql for GraphQL integration."
          ]
        },
        {
          "type": "heading",
          "content": "Do: Use Axios for REST Requests with Error Handling",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "import axios from \"axios\";\n  \n  async function getUsers() {\n    try {\n      const response = await axios.get(\"/api/users\");\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }"
        },
        {
          "type": "heading",
          "content": "Don't: Ignore Error Handling or Response Shape",
          "variant": "dont"
        },
        {
          "type": "code",
          "content": "fetch(\"/api/data\")\n    .then((res) => res.json())\n    .then((data) => console.log(data));\n  \n  // ‚ùå No catch block, no loading state, no error handling\n  "
        },
        {
          "type": "heading",
          "content": "Do: Use React Query for Caching and Auto Re-fetching",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "import { useQuery } from \"@tanstack/react-query\";\n  \n  function Users() {\n    const { data, isLoading, error } = useQuery({\n      queryKey: [\"users\"],\n      queryFn: () => axios.get(\"/api/users\").then((res) => res.data)\n    });\n  \n    if (isLoading) return <p>Loading...</p>;\n    if (error) return <p>Error!</p>;\n  \n    return data.map((user) => <p key={user.id}>{user.name}</p>);\n  }"
        },
        {
          "type": "heading",
          "content": "Do: Use SWR for Lightweight Data Fetching",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "import useSWR from \"swr\";\n  const fetcher = (url) => fetch(url).then((res) => res.json());\n  \n  function Profile() {\n    const { data, error } = useSWR(\"/api/user\", fetcher);\n  \n    if (!data) return <p>Loading...</p>;\n    return <p>Hello, {data.name}</p>;\n  }"
        },
        {
          "type": "heading",
          "content": "Do: Use Apollo for GraphQL Queries",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "import { useQuery, gql } from \"@apollo/client\";\n  \n  const GET_USER = gql`\n    query GetUser {\n      user {\n        id\n        name\n      }\n    }\n  `;\n  \n  function UserProfile() {\n    const { data, loading, error } = useQuery(GET_USER);\n    if (loading) return <p>Loading...</p>;\n    return <p>{data.user.name}</p>;\n  }"
        }
      ]
    },
    {
      "title": "22. Authentication & Authorization",
      "content": [
        {
          "type": "text",
          "content": "Authentication verifies identity; authorization grants access. Store tokens securely, use role-based rendering, and integrate OAuth providers for smoother user onboarding."
        },
        {
          "type": "list",
          "items": [
            "Use `localStorage` for non-sensitive tokens, but prefer cookies for security (HttpOnly).",
            "Render UI conditionally based on auth roles.",
            "Use providers like Google/GitHub with libraries such as Firebase or NextAuth.js."
          ]
        },
        {
          "type": "heading",
          "content": "Do: Store Tokens Safely and Handle Expiry",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "// Using localStorage (not for sensitive tokens)\n  localStorage.setItem(\"token\", token);\n  \n  // Or secure HttpOnly cookies (server-side)\n  \n  axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  "
        },
        {
          "type": "heading",
          "content": "Don't: Store Sensitive Tokens in Insecure Locations",
          "variant": "dont"
        },
        {
          "type": "code",
          "content": "window.token = \"secret\"; // ‚ùå Global scope = insecure\n  sessionStorage.setItem(\"auth\", JSON.stringify(user)); // ‚ùå Vulnerable to XSS\n  "
        },
        {
          "type": "heading",
          "content": "Do: Render Based on Roles or Auth Status",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "function Dashboard({ user }) {\n    if (!user) return <Navigate to=\"/login\" />;\n    if (user.role === \"admin\") return <AdminPanel />;\n    return <UserPanel />;\n  }"
        },
        {
          "type": "heading",
          "content": "Do: Use OAuth Providers (e.g., Firebase Auth)",
          "variant": "do"
        },
        {
          "type": "code",
          "content": "import { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n  \n  const provider = new GoogleAuthProvider();\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      const token = result.user.accessToken;\n      // Store token and redirect\n    });"
        },
        {
          "type": "heading",
          "content": "Don't: Rely on Frontend Checks Only for Secure Access",
          "variant": "dont"
        },
        {
          "type": "code",
          "content": "if (user.role === \"admin\") {\n    // ‚úÖ Can hide UI...\n  } \n  // ‚ùå But still enforce on the backend ‚Äî don't rely solely on frontend controls"
        }
      ]
    }
  ]
}