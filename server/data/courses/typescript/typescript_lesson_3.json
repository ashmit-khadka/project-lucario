{
    "title": "üöÄ Advanced TypeScript Topics",
    "description": "Explore advanced TypeScript features like conditional and mapped types, the `infer` keyword, declaration files, type packages, and compiler configuration.",
    "sections": [
      {
        "title": "14. üîç Advanced Type Manipulation",
        "content": [
          {
            "type": "text",
            "content": "TypeScript allows powerful type transformations using conditional types, mapped types, and template literal types. These features help you build flexible and reusable type logic."
          },
          {
            "type": "list",
            "items": [
              "Conditional types: `T extends U ? X : Y`.",
              "Mapped types: `{ [K in keyof T]: ... }`.",
              "Template literal types: ``type Event = `on${Capitalize<string>}` ``."
            ]
          },
          {
            "type": "heading",
            "content": "Example: Advanced Type Manipulation (Do)",
            "variant": "do"
          },
          {
            "type": "code",
            "content": "type IsString<T> = T extends string ? true : false;\n\ntype User = { id: number; name: string };\ntype ReadonlyUser = {\n    readonly [K in keyof User]: User[K];\n};\n\ntype Event = `on${Capitalize<'click' | 'hover'>}`;\n// Results in: \"onClick\" | \"onHover\"\n"
          },
          {
            "type": "heading",
            "content": "Example: Advanced Type Manipulation (Don't)",
            "variant": "dont"
          },
          {
            "type": "code",
            "content": "// Avoid overly complex or unreadable conditional types\ntype Confusing<T> = T extends string ? (T extends number ? string : boolean) : number;\n\n// Don't use mapped types without understanding property keys\ntype BadMapped = { [key: string]: number }; // Too broad, no key control\n"
          }
        ]
      },
      {
        "title": "15. üîç Infer and typeof in Types",
        "content": [
          {
            "type": "text",
            "content": "`infer` allows you to extract types inside conditional types, while `typeof` enables referencing value types in your type definitions."
          },
          {
            "type": "list",
            "items": [
              "Use `infer` to extract return types, array element types, etc.",
              "`typeof` lets you refer to the type of a variable or function."
            ]
          },
          {
            "type": "heading",
            "content": "Example: infer & typeof (Do)",
            "variant": "do"
          },
          {
            "type": "code",
            "content": "function getUser() {\n    return { id: 1, name: \"Alice\" };\n}\n\ntype User = ReturnType<typeof getUser>;\n\ntype ElementType<T> = T extends (infer U)[] ? U : T;\n\ntype NumberElement = ElementType<number[]>; // number\n"
          },
          {
            "type": "heading",
            "content": "Example: infer & typeof (Don't)",
            "variant": "dont"
          },
          {
            "type": "code",
            "content": "// Avoid excessive or confusing use of infer\ntype DeepInfer<T> = T extends Promise<infer U>\n    ? U extends Array<infer V>\n        ? V\n        : U\n    : T;\n\n// Incorrect typeof usage\nconst user = { id: 1, name: \"Bob\" };\ntype UserType = typeof \"user\"; // Incorrect ‚Äì gives 'string' not type of user\n"
          }
        ]
      },
      {
        "title": "16. üîç Declaration Files",
        "content": [
          {
            "type": "text",
            "content": "Declaration files (`.d.ts`) allow you to define type information for JavaScript code or untyped modules. They're essential when working with legacy or third-party code."
          },
          {
            "type": "list",
            "items": [
              "Use `.d.ts` to declare types for modules or global variables.",
              "`declare module` is useful for 3rd-party packages without types.",
              "Use `export` or `global` scope as needed."
            ]
          },
          {
            "type": "heading",
            "content": "Example: Declaration Files (Do)",
            "variant": "do"
          },
          {
            "type": "code",
            "content": "// file: custom-lib.d.ts\ndeclare module \"custom-lib\" {\n    export function greet(name: string): string;\n}\n\n// Usage\nimport { greet } from \"custom-lib\";\ngreet(\"World\");\n"
          },
          {
            "type": "heading",
            "content": "Example: Declaration Files (Don't)",
            "variant": "dont"
          },
          {
            "type": "code",
            "content": "// Don't put implementation in .d.ts files\n// Bad: this file should only contain declarations\ndeclare function greet(name: string) {\n    return \"Hi \" + name;\n}\n"
          }
        ]
      },
      {
        "title": "17. üîç Third-Party Types",
        "content": [
          {
            "type": "text",
            "content": "TypeScript supports external type definitions through the DefinitelyTyped project. Install these with `@types` packages to enable type checking on third-party libraries."
          },
          {
            "type": "list",
            "items": [
              "Use `npm install @types/library` for third-party type support.",
              "DefinitelyTyped is the community-maintained source of type packages.",
              "Types are automatically picked up if installed."
            ]
          },
          {
            "type": "heading",
            "content": "Example: Third-Party Types (Do)",
            "variant": "do"
          },
          {
            "type": "code",
            "content": "// Install types separately for non-TypeScript packages\n// npm install lodash\n// npm install --save-dev @types/lodash\n\nimport _ from \"lodash\";\n\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2);\n"
          },
          {
            "type": "heading",
            "content": "Example: Third-Party Types (Don't)",
            "variant": "dont"
          },
          {
            "type": "code",
            "content": "// Don't use 'any' for external libraries with available types\nconst lodash: any = require(\"lodash\");\nlodash.map([1, 2, 3], x => x * 2); // No type safety\n"
          }
        ]
      },
      {
        "title": "18. üîç Configuration",
        "content": [
          {
            "type": "text",
            "content": "The `tsconfig.json` file controls TypeScript‚Äôs compiler behavior. Understanding key options like `strict`, `paths`, and `moduleResolution` helps you write safer and more scalable projects."
          },
          {
            "type": "list",
            "items": [
              "Use `strict: true` to enable all strict type checks.",
              "`paths` and `baseUrl` let you define path aliases.",
              "`moduleResolution` affects how modules are located.",
              "Use `include` and `exclude` to control file compilation."
            ]
          },
          {
            "type": "heading",
            "content": "Example: tsconfig.json (Do)",
            "variant": "do"
          },
          {
            "type": "code",
            "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@utils/*\": [\"utils/*\"]\n    }\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}"
          },
          {
            "type": "heading",
            "content": "Example: tsconfig.json (Don't)",
            "variant": "dont"
          },
          {
            "type": "code",
            "content": "{\n  \"compilerOptions\": {\n    \"strict\": false,\n    \"noImplicitAny\": false // Loses safety\n  }\n}\n// Avoid disabling strict checks in production\n"
          }
        ]
      }
    ]
  }